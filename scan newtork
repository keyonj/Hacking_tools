import scapy.all as scapy
import argparse
from colorama import Fore, Style, init
import pyfiglet
import threading
from tabulate import tabulate
import logging
import ipaddress
import subprocess

init()

'''Select Config Error'''
logging.basicConfig(level=logging.INFO)

'''Verify address validity'''

def verify_ip(input_ip):
    try:
        ipaddress.ip_network(input_ip, strict=False)
        return True
    except ValueError:
        return False

''' Get args '''

def get_arguments():
    parser = argparse.ArgumentParser(description="Keyo Scan")
    parser.add_argument("-r", "--range", dest="network_ip", help="Enter Range IP")
    parser.add_argument("-p", "--ports", dest="ports", help="Enter Port Range (e.g., 20-80)")
    parser.add_argument("-t", "--target", dest="target_ip", help="Enter Target IP to scan")
    parser.add_argument("-s", "--fast", action="store_true", dest="fast_scan", default=False,
                        help="Enable fast scan (scan first 20 ports only)")
    parser.add_argument("-P", "--protocol", dest="protocol", choices=['TCP', 'UDP'], default='TCP',
                        help="Select protocol for scan (TCP or UDP)")
    args = parser.parse_args()

    if not args.network_ip and not args.target_ip:
        parser.error(f"{Fore.RED}[-] Please Enter either Range IP or Target IP, Enter -h for Help{Style.RESET_ALL}")
    if not args.ports:
        parser.error(f"{Fore.RED}[-] Please Enter Port Range, Enter -h for Help{Style.RESET_ALL}")
    return args


'''Get Os and Mac Address'''

def get_os_and_mac(ip):
    try:
        ''' Send TCP SYN packet to determine OS based on TTL, MSS, and Window Size '''
        tcp_packet = scapy.IP(dst=ip) / scapy.TCP(dport=80, flags="S")
        response = scapy.sr1(tcp_packet, timeout=1, verbose=False)
        os_type = "Unknown OS"

        if response:
            ttl = response.ttl
            window_size = response[scapy.TCP].window
            mss = response[scapy.TCP].options
            mss_value = None
            for option in mss:
                if isinstance(option, tuple) and option[0] == 'MSS':
                    mss_value = option[1]
                    break

            # Check OS based on TTL, Window Size, and MSS
            if ttl <= 64 and window_size == 5840:
                os_type = "Linux"
            elif ttl <= 128 and window_size == 8192:
                os_type = "Windows"
            elif ttl == 255:
                os_type = "MacOS"
            elif mss_value and mss_value == 1460:
                os_type = "Linux"
            else:
                os_type = "Unknown OS"
        else:
            os_type = "No response from IP"

        ''' ARP packet to get MAC address '''
        arp_request = scapy.ARP(pdst=ip)
        broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
        arp_request_broadcast = broadcast / arp_request
        answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
        mac_address = "No response"
        if answered_list:
            mac_address = answered_list[0][1].hwsrc

        return os_type, mac_address
    except Exception as e:
        logging.error(f"{Fore.RED}[-] Error getting OS and MAC Address for {ip}: {e}{Style.RESET_ALL}")
        return "Error", "Error"


'''Scan network'''

def scan(network_ip):
    '''Create Packet ARP For Scan'''
    arp_request = scapy.ARP(pdst=network_ip)
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]

    clients_list = []
    for element in answered_list:
        client_dict = {"ip": element[1].psrc, "mac": element[1].hwsrc}
        clients_list.append(client_dict)
    return clients_list


'''Nmap UDP scan'''
def nmap_udp_scan(ip, port):
    # Nmap UDP scan command with more detailed output
    command = f"nmap -sU -p {port} {ip} -T4 -v"
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            output = result.stdout
            # Analyze the result for open/closed ports
            if "open" in output:
                return "Open"
            elif "closed" in output:
                return "Closed"
            else:
                return "Filtered"  # If Nmap is not sure about the port
        else:
            logging.error(f"{Fore.RED}[-] Error running Nmap Scan: {result.stderr}{Style.RESET_ALL}")
            return "Error"
    except Exception as e:
        logging.error(f"{Fore.RED}[-] Error running Nmap UDP Scan: {e}{Style.RESET_ALL}")
        return "Error"



'''Scan ports on TCP or UDP'''

def scan_port(ip, port, port_results, protocol):
    try:
        max_retries = 3
        response = None

        if protocol == 'TCP':
            tcp_packet = scapy.IP(dst=ip) / scapy.TCP(dport=port, flags="S")
            for attempt in range(max_retries):
                response = scapy.sr1(tcp_packet, timeout=2, verbose=False)
                if response:
                    break

            if response:
                if response.haslayer(scapy.TCP):
                    if response[scapy.TCP].flags == "SA":
                        port_results.append([port, "Open"])
                    elif response[scapy.TCP].flags == "RA":
                        port_results.append([port, "Closed"])
                elif response.haslayer(scapy.ICMP):
                    icmp_layer = response[scapy.ICMP]
                    if icmp_layer.type == 3:
                        port_results.append([port, "Closed (ICMP unreachable)"])

        elif protocol == 'UDP':
            udp_packet = scapy.IP(dst=ip) / scapy.UDP(dport=port)
            for attempt in range(max_retries):
                response = scapy.sr1(udp_packet, timeout=3, verbose=False)
                if response:
                    break

            if response is None:
                port_results.append([port, "Open"])
            elif response.haslayer(scapy.ICMP):
                icmp_layer = response[scapy.ICMP]
                if icmp_layer.type == 3 and icmp_layer.code == 3:
                    port_results.append([port, "Closed"])
                else:
                    port_results.append([port, "Filtered"])
            else:
                nmap_result = nmap_udp_scan(ip, port)
                port_results.append([port, nmap_result])

    except Exception as e:
        logging.error(f"[-] Error scanning port {port} on {ip} with protocol {protocol}: {e}")
        port_results.append([port, f"Error: {str(e)}"])



'''Scan ports in Threading'''

def scan_ports(ip, ports_input, fast_scan, protocol):
    if "-" in ports_input:
        start_port, end_port = map(int, ports_input.split("-"))
    else:
        start_port = end_port = int(ports_input)

    if fast_scan:
        end_port = min(start_port + 19, end_port)
    logging.info(
        f"{Fore.CYAN}[+] Scanning ports on {ip} from {start_port} to {end_port} using {protocol}...{Style.RESET_ALL}")
    port_results = []

    threads = []
    for port in range(start_port, end_port + 1):
        thread = threading.Thread(target=scan_port, args=(ip, port, port_results, protocol))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

    print(f"\n{Fore.YELLOW}Port Scan Results for {ip}:{Style.RESET_ALL}")
    print(tabulate(port_results, headers=["Port", "Status"], tablefmt="pretty"))


'''Display results'''

def display_results(ip, ports_range, fast_scan, protocol):
    os_type, mac = get_os_and_mac(ip)

    if os_type == "No response from IP":
        print(
            f"{Fore.RED}[-] No response from the target IP {ip}. It might be unreachable or not responding.{Style.RESET_ALL}")
    else:
        results = [[ip, mac, os_type]]
        print(f"{Fore.CYAN}" + "-" * 43 + f"{Style.RESET_ALL}")
        print(tabulate(results, headers=["IP Address", "Mac Address", "OS"], tablefmt="pretty"))

        scan_ports(ip, ports_range, fast_scan, protocol)


options = get_arguments()

'''Start Program'''
try:

    if options.target_ip and not verify_ip(options.target_ip):
        print(f"{Fore.RED}[-] Invalid Target IP. Please enter a valid IP Address.{Style.RESET_ALL}")
    elif options.network_ip and not verify_ip(options.network_ip):
        print(f"{Fore.RED}[-] Invalid Network IP. Please enter a valid IP range.{Style.RESET_ALL}")
    else:
        if options.target_ip:
            display_results(options.target_ip, options.ports, options.fast_scan, options.protocol)
        else:
            client_list = scan(options.network_ip)
            for client in client_list:
                display_results(client["ip"], options.ports, options.fast_scan, options.protocol)
except KeyboardInterrupt:
    print(f"\n{Fore.YELLOW}[+] Exiting... \n{Style.RESET_ALL}")
